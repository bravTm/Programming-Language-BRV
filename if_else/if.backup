#include <iostream>
#include <vector>

using namespace std;


vector <int> workIf(int index, vector <vector <string>> tokens){
    vector <vector <string>> condition;
    bool isThen = false;
    int idxend = -1;

    for(int i = index + 1; i < tokens.size(); i++){
        if(tokens[i][0] == "THEN") isThen = true;
        if(!isThen){
            condition.push_back(tokens[i]);
        }

        if(isThen && tokens[i][0] == "ENDIF"){
            idxend = i;
            break;
        }
    }

    if(idxend == -1) except("IFERROR: Add 'endif'");
    else if(!isThen) except("IFERROR: Add 'then'");


    // проверка условия. Если ложь, то i в парсере сделать idxend + 1, иначе ничего не менять

    vector <vector <string>> res;
    bool isEl = false;

    for(int i = 0; i < condition.size(); i++){
        if((condition[i][0] == "NUMBER" || condition[i][1] == "(") && !isEl) {
            vector <string> temp;
            temp.push_back("NUMBER");
            temp.push_back(to_string(calc(searchExpression(i, condition))));

            res.push_back(temp);
            isEl = true;
        }
        else if(condition[i][0] == "STRING" && !isEl){
            vector <string> temp;
            string item = searchString(i, condition);
            
            if(isNum(item)) temp.push_back("NUMBER");
            else temp.push_back("STRING");
            temp.push_back(item);

            res.push_back(temp);
            isEl = true;
        }
        else if(condition[i][0] == "AND" || condition[i][0] == "OR" || condition[i][0] == "NOT" || condition[i][0] == "COMPARISON"
        || condition[i][0] == "UNEQUAL") {
            res.push_back(condition[i]);
            isEl = false;
        }
    }

    vector<vector<string>>().swap(condition);

    if(res[0][0] != "STRING" && res[0][0] != "NUMBER" && res[0][0] != "NOT") except("IFERROR: Condition invalid");

    string prev_item, oper;
    vector <string> last;
    
    for(int i = 0; i < res.size(); i++){
        if(res[i][0] == "AND" || res[i][0] == "OR" || res[i][0] == "NOT" && i != 0){
            last.push_back(res[i][0]);
            prev_item = "";
            oper = "";
            continue;
        }


        if(prev_item.size() > 0 && oper.size() > 0){
            if(oper == "COMPARISON"){
                if(prev_item == res[i][1]) last.push_back("1");
                else last.push_back("0");
            }
            else if(oper == "UNEQUAL"){
                if(prev_item != res[i][1]) last.push_back("1");
                else last.push_back("0");
            }

            continue;
        }

        if(prev_item == "" && (res[i][0] != "COMPARISON" || res[i][0] != "UNEQUAL")){
            prev_item = res[i][1];
        }
        else if(res[i][0] == "COMPARISON" || res[i][0] == "UNEQUAL"){
            oper = res[i][0];
        }
    }

    vector<vector<string>>().swap(res);


    bool answer = stoi(last[0]);

    for(int i = 1; i < last.size() - 1; i++){
        if(last[i] == "AND") answer = answer && stoi(last[i+1]);
        else if(last[i] == "OR") answer = answer || stoi(last[i+1]);
        else if(last[i] == "NOT") answer = !answer;
        // если есть оператор и сейчас число 1 или 0, то сравнивать и записывать в переменную answer общий ответ (0 && 1 == 0)
        // после записи, очищать оператор
    }

    vector <int> ret = {answer};

    if(answer == 0) ret.push_back(idxend + 1);

    return ret;
}